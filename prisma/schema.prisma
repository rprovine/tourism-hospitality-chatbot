generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Business {
  id                    String            @id @default(cuid())
  email                 String            @unique
  password              String
  name                  String
  type                  String
  tier                  String            @default("starter")
  subscriptionStatus    String            @default("trial")
  subscriptionTier      String?
  trialStartDate        DateTime?
  trialEndDate          DateTime?
  subscriptionStartDate DateTime?
  subscriptionEndDate   DateTime?
  hubspotDealId         String?
  hubspotContactId      String?
  primaryColor          String            @default("#0891b2")
  logo                  String?
  welcomeMessage        String            @default("Aloha! How can I help you today?")
  businessInfo          Json?
  aiSettings            Json?
  apiKey                String?           @unique @default(cuid())
  apiKeyCreatedAt       DateTime?
  webhookUrl            String?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  analytics          Analytics[]
  conversations      Conversation[]
  knowledgeBase      KnowledgeBase[]
  subscription       Subscription?
  guestProfiles      GuestProfile[]
  triggerMessages    TriggerMessage[]
  guestInteractions  GuestInteraction[]
  channelConfigs     ChannelConfig[]
  messageQueues      MessageQueue[]
  channelSessions    ChannelSession[]
  messageTemplates   MessageTemplate[]
  feedbacks          ConversationFeedback[]
  learningPatterns   LearningPattern[]
  aiInsights         AIInsight[]
  checkoutSessions   CheckoutSession[]
}

model Subscription {
  id                String    @id @default(cuid())
  businessId        String    @unique
  tier              String
  status            String
  billingCycle      String    @default("monthly")
  paymentMethod     String    @default("hubspot")
  paymentStatus     String    @default("pending")
  startDate         DateTime
  endDate           DateTime
  cancelAtPeriodEnd Boolean   @default(false)
  cancelledAt       DateTime?
  cancelDate        DateTime?
  cancelReason      String?
  paymentFailedAt   DateTime?
  gracePeriodEnds   DateTime?
  accessRevokedAt   DateTime?
  lastPaymentAttempt DateTime?
  paymentAttempts   Int       @default(0)
  metadata          Json?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  business          Business  @relation(fields: [businessId], references: [id], onDelete: Cascade)
}

model Conversation {
  id                String                @id @default(cuid())
  businessId        String
  sessionId         String
  userLocation      String?
  userLanguage      String                @default("en")
  satisfactionScore Int?
  resolutionTime    Int?
  escalated         Boolean               @default(false)
  metadata          Json?
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  business          Business              @relation(fields: [businessId], references: [id], onDelete: Cascade)
  messages          Message[]
  contexts          ConversationContext[]
  channelSessions   ChannelSession[]
  feedbacks         ConversationFeedback[]

  @@index([businessId])
  @@index([sessionId])
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  role           String
  content        String
  intent         String?
  confidence     Float?
  language       String       @default("en")
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
}

model KnowledgeBase {
  id         String    @id @default(cuid())
  businessId String
  category   String
  question   String
  answer     String
  keywords   String
  language   String    @default("en")
  priority   Int       @default(0)
  usageCount Int       @default(0)
  lastUsed   DateTime?
  isActive   Boolean   @default(true)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  business   Business  @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@index([businessId])
  @@index([category])
  @@index([language])
}

model Analytics {
  id                 String   @id @default(cuid())
  businessId         String
  date               DateTime @db.Date
  totalConversations Int      @default(0)
  uniqueUsers        Int      @default(0)
  avgResponseTime    Float    @default(0)
  avgSatisfaction    Float?
  languageStats      Json?
  topQuestions       Json?
  peakHours          Json?
  createdAt          DateTime @default(now())
  business           Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@unique([businessId, date])
  @@index([businessId])
  @@index([date])
}

model ApiLog {
  id           String   @id @default(cuid())
  businessId   String
  endpoint     String
  method       String
  statusCode   Int
  responseTime Int
  requestBody  Json?
  responseBody Json?
  error        String?
  createdAt    DateTime @default(now())

  @@index([businessId])
  @@index([createdAt])
}

model AdminUser {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  name      String
  role      String    @default("admin")
  lastLogin DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model GuestProfile {
  id                 String               @id @default(cuid())
  businessId         String
  email              String?
  phone              String?
  name               String?
  preferences        Json?                @default("{}")
  tags               String[]             @default([])
  languagePreference String               @default("en")
  lastVisit          DateTime?
  totalConversations Int                  @default(0)
  totalBookings      Int                  @default(0)
  lifetimeValue      Decimal              @default(0)
  notes              String?
  metadata           Json?                @default("{}")
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  business           Business             @relation(fields: [businessId], references: [id], onDelete: Cascade)
  contexts           ConversationContext[]
  interactions       GuestInteraction[]
  channelSessions    ChannelSession[]

  @@index([businessId])
  @@index([email])
  @@index([phone])
}

model ConversationContext {
  id             String        @id @default(cuid())
  conversationId String
  guestProfileId String?
  context        Json?         @default("{}")
  bookingIntent  Json?
  lastTopic      String?
  abandonedAt    DateTime?
  completedAt    DateTime?
  followUpSent   Boolean       @default(false)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  conversation   Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  guestProfile   GuestProfile? @relation(fields: [guestProfileId], references: [id], onDelete: SetNull)

  @@index([conversationId])
  @@index([guestProfileId])
}

model TriggerMessage {
  id              String   @id @default(cuid())
  businessId      String
  name            String
  triggerType     String   // 'abandonment', 'welcome_back', 'post_stay', 'upsell'
  conditions      Json?    @default("{}")
  message         String
  delay           Int      @default(0) // delay in minutes
  channel         String   @default("email") // 'email', 'sms', 'whatsapp', 'web'
  isActive        Boolean  @default(true)
  sentCount       Int      @default(0)
  clickCount      Int      @default(0)
  conversionCount Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  business        Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@index([businessId])
}

model GuestInteraction {
  id             String       @id @default(cuid())
  guestProfileId String
  businessId     String
  interactionType String      // 'chat', 'email', 'booking', 'review', 'complaint'
  channel        String
  content        String?
  sentiment      Decimal?    // -1 to 1 scale
  outcome        String?
  metadata       Json?        @default("{}")
  createdAt      DateTime     @default(now())
  guestProfile   GuestProfile @relation(fields: [guestProfileId], references: [id], onDelete: Cascade)
  business       Business     @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@index([guestProfileId])
  @@index([businessId])
}

model ChannelConfig {
  id            String   @id @default(cuid())
  businessId    String
  channel       String   // 'whatsapp', 'sms', 'instagram', 'facebook', 'telegram'
  isActive      Boolean  @default(false)
  config        Json?    @default("{}") // Store API keys, tokens, etc
  webhookUrl    String?
  webhookSecret String?
  rateLimits    Json?    @default("{}")
  metadata      Json?    @default("{}")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  business      Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@index([businessId])
  @@index([channel])
}

model MessageQueue {
  id           String    @id @default(cuid())
  businessId   String
  channel      String
  recipient    String    // phone number, whatsapp id, instagram handle, etc
  message      String
  mediaUrl     String?
  status       String    @default("pending") // 'pending', 'sending', 'sent', 'delivered', 'failed'
  priority     Int       @default(0)
  scheduledFor DateTime?
  sentAt       DateTime?
  deliveredAt  DateTime?
  error        String?
  retries      Int       @default(0)
  metadata     Json?     @default("{}")
  createdAt    DateTime  @default(now())
  business     Business  @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@index([businessId])
  @@index([status])
  @@index([scheduledFor])
}

model ChannelSession {
  id             String        @id @default(cuid())
  businessId     String
  channel        String
  externalId     String        // WhatsApp conversation ID, SMS thread, etc
  recipient      String
  guestProfileId String?
  conversationId String?
  status         String        @default("active") // 'active', 'expired', 'closed'
  lastMessageAt  DateTime?
  metadata       Json?         @default("{}")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  business       Business      @relation(fields: [businessId], references: [id], onDelete: Cascade)
  guestProfile   GuestProfile? @relation(fields: [guestProfileId], references: [id], onDelete: SetNull)
  conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: SetNull)

  @@index([businessId])
  @@index([channel])
  @@index([externalId])
  @@index([guestProfileId])
}

model MessageTemplate {
  id             String   @id @default(cuid())
  businessId     String
  name           String
  channel        String
  category       String   // 'marketing', 'utility', 'authentication'
  language       String   @default("en")
  content        String
  variables      String[] @default([])
  mediaUrl       String?
  buttons        Json?    @default("[]")
  externalId     String?  // WhatsApp template ID, etc
  approvalStatus String   @default("pending") // 'pending', 'approved', 'rejected'
  isActive       Boolean  @default(true)
  usageCount     Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  business       Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@index([businessId])
  @@index([channel])
}

model ConversationFeedback {
  id             String       @id @default(cuid())
  conversationId String
  businessId     String
  feedback       String       // 'positive', 'negative', 'neutral'
  rating         Int?         // 1-5 star rating
  comment        String?
  context        Json?        @default("{}")
  timestamp      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  business       Business     @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([businessId])
}

model LearningPattern {
  id            String   @id @default(cuid())
  businessId    String
  pattern       String
  frequency     Int      @default(1)
  successRate   Decimal  @default(0.5)
  avgSentiment  Decimal  @default(0)
  lastSeen      DateTime @default(now())
  responses     Json?    @default("[]") // Successful response examples
  metadata      Json?    @default("{}")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  business      Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@index([businessId])
  @@index([pattern])
}

model AIInsight {
  id             String   @id @default(cuid())
  businessId     String
  type           String   // 'improvement', 'issue', 'opportunity', 'trend'
  title          String
  description    String
  impact         String   // 'high', 'medium', 'low'
  recommendation String
  metrics        Json?    @default("{}")
  status         String   @default("active") // 'active', 'resolved', 'dismissed'
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  business       Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@index([businessId])
  @@index([type])
  @@index([status])
}

model CheckoutSession {
  id                String    @id @default(cuid())
  businessId        String
  sessionId         String    @unique // Unique identifier for this checkout session
  planId            String    // e.g., 'professional_monthly'
  status            String    @default("pending") // 'pending', 'completed', 'failed', 'expired'
  email             String
  businessName      String
  contactName       String?
  phone             String?
  paymentUrl        String    // The actual payment link with parameters
  hubspotSubscriptionId String? // Set after successful payment
  metadata          Json?     @default("{}")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  completedAt       DateTime?
  business          Business  @relation(fields: [businessId], references: [id], onDelete: Cascade)
  
  @@index([businessId])
  @@index([sessionId])
  @@index([status])
  @@index([email])
}
