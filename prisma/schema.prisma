// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Business/Organization model
model Business {
  id               String          @id @default(cuid())
  email            String          @unique
  password         String
  name             String
  type             String          // hotel, tour_operator, vacation_rental
  tier             String          @default("starter") // starter, professional, premium, enterprise
  
  // Subscription status
  subscriptionStatus String        @default("trial") // trial, active, cancelled, expired
  
  // Customization
  primaryColor     String          @default("#0891b2")
  logo             String?
  welcomeMessage   String          @default("Aloha! How can I help you today?")
  businessInfo     Json?           // address, phone, hours, etc.
  
  // Usage tracking
  monthlyConversationCount Int     @default(0)
  lastConversationReset    DateTime @default(now())
  
  // API Access
  apiKey           String?         @unique
  apiKeyCreatedAt  DateTime?
  
  // Relations
  conversations    Conversation[]
  knowledgeBase    KnowledgeBase[]
  subscription     Subscription?
  analytics        Analytics[]
  apiLogs          ApiLog[]
  
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

// Subscription model
model Subscription {
  id               String          @id @default(cuid())
  businessId       String          @unique
  business         Business        @relation(fields: [businessId], references: [id], onDelete: Cascade)
  
  tier             String          // starter, professional, premium, enterprise
  status           String          // active, pending, canceled, past_due
  
  // Payment provider info
  paymentMethod    String          @default("hubspot") // hubspot, stripe, manual
  paymentStatus    String          @default("pending") // pending, paid, failed
  
  // Dates
  startDate        DateTime
  endDate          DateTime
  cancelAtPeriodEnd Boolean        @default(false)
  
  // Metadata for payment providers
  metadata         Json?           // Store provider-specific data
  
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

// Conversation model
model Conversation {
  id               String          @id @default(cuid())
  businessId       String
  business         Business        @relation(fields: [businessId], references: [id], onDelete: Cascade)
  
  sessionId        String
  userId           String?         // Optional user identifier
  
  messages         Message[]
  metadata         Json?           // userLocation, language, etc.
  
  satisfaction     Int?            // 1-5 rating
  resolved         Boolean         @default(false)
  
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  
  @@index([businessId])
  @@index([sessionId])
}

// Message model
model Message {
  id               String          @id @default(cuid())
  conversationId   String
  conversation     Conversation    @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  role             String          // user, assistant, system
  content          String
  metadata         Json?
  
  createdAt        DateTime        @default(now())
  
  @@index([conversationId])
}

// Knowledge Base model
model KnowledgeBase {
  id               String          @id @default(cuid())
  businessId       String
  business         Business        @relation(fields: [businessId], references: [id], onDelete: Cascade)
  
  category         String          // general, booking, amenities, policies, local_info, etc.
  question         String
  answer           String          // SQLite stores String as TEXT anyway
  keywords         String          // Comma-separated keywords for matching
  priority         Int             @default(0) // Higher priority items shown first
  language         String          @default("en") // Language code
  isActive         Boolean         @default(true)
  
  // Usage tracking
  usageCount       Int             @default(0)
  lastUsed         DateTime?
  
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  
  @@index([businessId])
  @@index([category])
  @@index([language])
}

// Analytics model
model Analytics {
  id               String          @id @default(cuid())
  businessId       String
  business         Business        @relation(fields: [businessId], references: [id], onDelete: Cascade)
  
  date             DateTime
  
  totalConversations Int           @default(0)
  uniqueUsers      Int             @default(0)
  avgResponseTime  Float           @default(0)
  avgSatisfaction  Float           @default(0)
  bookingsGenerated Int            @default(0)
  
  topQuestions     Json?           // Array of {question, count}
  languageBreakdown Json?          // {en: 60, ja: 20, ...}
  
  createdAt        DateTime        @default(now())
  
  @@unique([businessId, date])
  @@index([businessId])
}

// API usage tracking
model ApiLog {
  id               String          @id @default(cuid())
  businessId       String
  business         Business        @relation(fields: [businessId], references: [id], onDelete: Cascade)
  
  endpoint         String
  method           String
  statusCode       Int
  responseTime     Int             // in milliseconds
  
  createdAt        DateTime        @default(now())
  
  @@index([businessId, createdAt])
}